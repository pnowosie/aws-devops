AWSTemplateFormatVersion: '2010-09-09'
Description: IAM Roles for Cross Account access

Parameters:
  AdminRoleName:
    Description: Leave empty if you don't want to create Admin IAM role
    Type: String
    Default: admin
  EnforceMfa:
    Description: Indicates whether roles can be assumed only after MFA authentication
    Type: String
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
  FullAccessRoleName:
    Description: Leave empty if you don't want to create FullAccess IAM role
    Type: String
    Default: full-access
  ProdTags:
    Description: Comma-separated list of the Production tag (resources with tag 'Stage:{this value}' will be deny to delete for each user except FullAccess)
    Type: String
    Default: prod,Prod,production,Production
  ReadOnlyRoleName:
    Description: Leave empty if you don't want to create ReadOnly IAM role
    Type: String
    Default: read-only
  SourceAccountIds:
    Description: Comma-separated list of the IDs of trusted AWS accounts that can assume IAM roles
    Type: String
  WorkingRoleName:
    Description: Leave empty if you don't want to create Working IAM role
    Type: String
    Default: working

Conditions:
  CreateFullAccessRole:
    !Not [ !Equals ["", !Ref FullAccessRoleName ]]
  CreateAdminRole:
    !Not [ !Equals ["", !Ref AdminRoleName ]]
  CreateReadOnlyRole:
    !Not [ !Equals ["", !Ref ReadOnlyRoleName ]]
  CreateWorkingRole:
    !Not [ !Equals ["", !Ref WorkingRoleName ]]
  EnforceMfa:
    !Equals [!Ref EnforceMfa, "yes" ]

Resources:
  ReadOnlyRole:
    Type: AWS::IAM::Role
    Condition: CreateReadOnlyRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                !Split [",", !Ref SourceAccountIds ]
            Action:
              - sts:AssumeRole
            Condition:
              !If
                - EnforceMfa
                - Bool:
                    aws:MultiFactorAuthPresent: true
                - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /
      RoleName: !Ref ReadOnlyRoleName

  WorkingRole:
    Type: AWS::IAM::Role
    Condition: CreateWorkingRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                !Split [",", !Ref SourceAccountIds ]
            Action:
              - sts:AssumeRole
            Condition:
              !If
                - EnforceMfa
                - Bool:
                    aws:MultiFactorAuthPresent: true
                - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - !Ref DenyIamWrite
        - !Ref DenyNetworkWrite
        - !Ref DenyConfigWrite
        - !Ref DenyCloudTrailWrite
        - !Ref DenyDeleteResources
      RoleName: !Ref WorkingRoleName

  AdminRole:
    Type: AWS::IAM::Role
    Condition: CreateAdminRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                !Split [",", !Ref SourceAccountIds ]
            Action:
              - sts:AssumeRole
            Condition:
              !If
                - EnforceMfa
                - Bool:
                    aws:MultiFactorAuthPresent: true
                - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - !Ref DenyNetworkWrite
        - !Ref DenyConfigWrite
        - !Ref DenyCloudTrailWrite
        - !Ref DenyProdTagsWrite
      RoleName: !Ref AdminRoleName

  FullAccessRole:
    Type: AWS::IAM::Role
    Condition: CreateFullAccessRole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                !Split [",", !Ref SourceAccountIds ]
            Action:
              - sts:AssumeRole
            Condition:
              !If
                - EnforceMfa
                - Bool:
                    aws:MultiFactorAuthPresent: true
                - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: !Ref FullAccessRoleName

  DenyIamWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny IAM write (only read)
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: denyiamwrite
            Effect: Deny
            Resource:
              - "*"
            Action:
              - iam:UpdateAssumeRolePolicy
              - iam:DeactivateMFADevice
              - iam:CreateServiceSpecificCredential
              - iam:DeleteAccessKey
              - iam:DeleteGroup
              - iam:UpdateOpenIDConnectProviderThumbprint
              - iam:RemoveRoleFromInstanceProfile
              - iam:UpdateGroup
              - iam:CreateRole
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
              - iam:AddRoleToInstanceProfile
              - iam:CreateLoginProfile
              - iam:DetachRolePolicy
              - iam:CreateAccountAlias
              - iam:DeleteServerCertificate
              - iam:UploadSSHPublicKey
              - iam:DetachGroupPolicy
              - iam:DetachUserPolicy
              - iam:DeleteOpenIDConnectProvider
              - iam:ChangePassword
              - iam:PutGroupPolicy
              - iam:UpdateLoginProfile
              - iam:UpdateServiceSpecificCredential
              - iam:CreateGroup
              - iam:RemoveClientIDFromOpenIDConnectProvider
              - iam:UpdateUser
              - iam:DeleteUserPolicy
              - iam:AttachUserPolicy
              - iam:DeleteRole
              - iam:UpdateRoleDescription
              - iam:UpdateAccessKey
              - iam:UpdateSSHPublicKey
              - iam:UpdateServerCertificate
              - iam:DeleteSigningCertificate
              - iam:UpdateAccountPasswordPolicy
              - iam:DeleteServiceLinkedRole
              - iam:CreateInstanceProfile
              - iam:UntagRole
              - iam:PutRolePermissionsBoundary
              - iam:TagRole
              - iam:ResetServiceSpecificCredential
              - iam:DeletePolicy
              - iam:DeleteSSHPublicKey
              - iam:CreateVirtualMFADevice
              - iam:CreateSAMLProvider
              - iam:DeleteRolePermissionsBoundary
              - iam:CreateUser
              - iam:CreateAccessKey
              - iam:AddUserToGroup
              - iam:RemoveUserFromGroup
              - iam:DeleteRolePolicy
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
              - iam:DeleteAccountAlias
              - iam:CreatePolicyVersion
              - iam:UpdateSAMLProvider
              - iam:DeleteLoginProfile
              - iam:DeleteInstanceProfile
              - iam:UploadSigningCertificate
              - iam:DeleteAccountPasswordPolicy
              - iam:PutUserPermissionsBoundary
              - iam:DeleteUser
              - iam:DeleteUserPermissionsBoundary
              - iam:TagUser
              - iam:CreateOpenIDConnectProvider
              - iam:UploadServerCertificate
              - iam:CreatePolicy
              - iam:UntagUser
              - iam:CreateServiceLinkedRole
              - iam:DeleteVirtualMFADevice
              - iam:AttachGroupPolicy
              - iam:PutUserPolicy
              - iam:UpdateRole
              - iam:UpdateSigningCertificate
              - iam:DeleteGroupPolicy
              - iam:AddClientIDToOpenIDConnectProvider
              - iam:DeleteServiceSpecificCredential
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
              - iam:DeleteSAMLProvider

  DenyNetworkWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny Network write (only read)
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action:
              - ec2:AcceptVpcEndpointConnections
              - ec2:AssociateDhcpOptions
              - ec2:AssociateRouteTable
              - ec2:AssociateSubnetCidrBlock
              - ec2:AssociateVpcCidrBlock
              - ec2:AttachInternetGateway
              - ec2:AttachVpnGateway
              - ec2:CreateCustomerGateway
              - ec2:CreateDefaultSubnet
              - ec2:CreateDefaultVpc
              - ec2:CreateDhcpOptions
              - ec2:CreateEgressOnlyInternetGateway
              - ec2:CreateFlowLogs
              - ec2:CreateInternetGateway
              - ec2:CreateNatGateway
              - ec2:CreateNetworkAcl
              - ec2:CreateNetworkAclEntry
              - ec2:CreateNetworkInterface
              - ec2:CreateNetworkInterfacePermission
              - ec2:CreatePlacementGroup
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateSubnet
              - ec2:CreateTags
              - ec2:CreateVpc
              - ec2:CreateVpcEndpoint
              - ec2:CreateVpcEndpointConnectionNotification
              - ec2:CreateVpcEndpointServiceConfiguration
              - ec2:CreateVpnConnection
              - ec2:CreateVpnConnectionRoute
              - ec2:CreateVpnGateway
              - ec2:DeleteEgressOnlyInternetGateway
              - ec2:DeleteFlowLogs
              - ec2:DeleteNatGateway
              - ec2:DeleteNetworkInterface
              - ec2:DeleteNetworkInterfacePermission
              - ec2:DeletePlacementGroup
              - ec2:DeleteSubnet
              - ec2:DeleteTags
              - ec2:DeleteVpc
              - ec2:DeleteVpcEndpointConnectionNotifications
              - ec2:DeleteVpcEndpoints
              - ec2:DeleteVpcEndpointServiceConfigurations
              - ec2:DeleteVpnConnection
              - ec2:DeleteVpnConnectionRoute
              - ec2:DeleteVpnGateway
              - ec2:DetachInternetGateway
              - ec2:DetachNetworkInterface
              - ec2:DetachVpnGateway
              - ec2:DisableVgwRoutePropagation
              - ec2:DisableVpcClassicLinkDnsSupport
              - ec2:DisassociateRouteTable
              - ec2:DisassociateSubnetCidrBlock
              - ec2:DisassociateVpcCidrBlock
              - ec2:EnableVgwRoutePropagation
              - ec2:EnableVpcClassicLinkDnsSupport
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - ec2:ModifyVpcEndpoint
              - ec2:ModifyVpcEndpointConnectionNotification
              - ec2:ModifyVpcEndpointServiceConfiguration
              - ec2:ModifyVpcEndpointServicePermissions
              - ec2:ModifyVpcPeeringConnectionOptions
              - ec2:ModifyVpcTenancy
              - ec2:MoveAddressToVpc
              - ec2:RejectVpcEndpointConnections
              - ec2:ReleaseAddress
              - ec2:ReplaceNetworkAclAssociation
              - ec2:ReplaceNetworkAclEntry
              - ec2:ReplaceRoute
              - ec2:ReplaceRouteTableAssociation
              - ec2:ResetNetworkInterfaceAttribute
              - ec2:RestoreAddressToClassic
              - ec2:UnassignIpv6Addresses
              - ec2:UnassignPrivateIpAddresses
              - ec2:UpdateSecurityGroupRuleDescriptionsEgress
              - ec2:UpdateSecurityGroupRuleDescriptionsIngress
              - directconnect:*
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:AcceptVpcPeeringConnection
              - ec2:AttachClassicLinkVpc
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateVpcPeeringConnection
              - ec2:DeleteCustomerGateway
              - ec2:DeleteDhcpOptions
              - ec2:DeleteInternetGateway
              - ec2:DeleteNetworkAcl
              - ec2:DeleteNetworkAclEntry
              - ec2:DeleteRoute
              - ec2:DeleteRouteTable
              - ec2:DeleteSecurityGroup
              - ec2:DeleteVolume
              - ec2:DeleteVpcPeeringConnection
              - ec2:DetachClassicLinkVpc
              - ec2:DisableVpcClassicLink
              - ec2:EnableVpcClassicLink
              - ec2:GetConsoleScreenshot
              - ec2:RejectVpcPeeringConnection
              - ec2:RevokeSecurityGroupEgress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"

  DenyProdTagsWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny terminating production EC2 instances
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Resource:
              - '*'
            Action:
              - ec2:TerminateInstances
              - ec2:StopInstances
              - ec2:CreateTags
              - ec2:DeleteTags
            Condition:
              StringEquals:
                ec2:ResourceTag/Stage: !Split [",", !Ref ProdTags ]

  DenyCloudTrailWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny CloudTrail write (only read)
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: denycloudtrailwrite
            Effect: Deny
            Resource:
              - "*"
            Action:
              - cloudtrail:PutEventSelectors
              - cloudtrail:StopLogging
              - cloudtrail:StartLogging
              - cloudtrail:AddTags
              - cloudtrail:DeleteTrail
              - cloudtrail:UpdateTrail
              - cloudtrail:CreateTrail
              - cloudtrail:RemoveTags

  DenyConfigWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny Config write (only read)
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: denyconfigwrite
            Effect: Deny
            Resource:
              - "*"
            Action:
              - config:DeleteDeliveryChannel
              - config:PutConfigurationRecorder
              - config:PutConfigRule
              - config:PutEvaluations
              - config:StopConfigurationRecorder
              - config:DeleteRetentionConfiguration
              - config:PutAggregationAuthorization
              - config:StartConfigurationRecorder
              - config:PutDeliveryChannel
              - config:StartConfigRulesEvaluation
              - config:DeleteConfigurationRecorder
              - config:DeleteAggregationAuthorization
              - config:DeleteEvaluationResults
              - config:PutConfigurationAggregator
              - config:DeletePendingAggregationRequest
              - config:PutRetentionConfiguration
              - config:DeleteConfigurationAggregator
              - config:DeleteConfigRule

  DenyDeleteResources:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Deny deletion of resources
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: denydeleteresources
            Effect: Deny
            Resource:
              - "*"
            Action:
                - a4b:*delete*
                - acm-pca:*delete*
                - acm:*delete*
                - amplify:*delete*
                - apigateway:*delete*
                - application-autoscaling:*delete*
                - applicationinsights:*delete*
                - appstream:*delete*
                - appsync:*delete*
                - artifact:*delete*
                - athena:*delete*
                - autoscaling-plans:*delete*
                - autoscaling:*delete*
                - aws-marketplace-management:*delete*
                - aws-marketplace:*delete*
                - aws-marketplace:*delete*
                - aws-portal:*delete*
                - backup:*delete*
                - batch:*delete*
                - budgets:*delete*
                - ce:*delete*
                - chatbot:*delete*
                - chime:*delete*
                - cloud9:*delete*
                - clouddirectory:*delete*
                - cloudfront:*delete*
                - cloudhsm:*delete*
                - cloudformation:*delete*
                - cloudsearch:*delete*
                - cloudsearchdomain:*delete*
                - cloudtrail:*delete*
                - cloudwatch:*delete*
                - codebuild:*delete*
                - codecommit:*delete*
                - codedeploy:*delete*
                - codepipeline:*delete*
                - codestar:*delete*
                - cognito-identity:*delete*
                - cognito-idp:*delete*
                - cognito-sync:*delete*
                - cognitosync:*delete*
                - comprehend:*delete*
                - comprehendmedical:*delete*
                - config:*delete*
                - configservice:*delete*
                - configure:*delete*
                - connect:*destroy*
                - cur:*delete*
                - datapipeline:*delete*
                - datasync:*delete*
                - dax:*delete*
                - deeplens:*delete*
                - deploy:*delete*
                - devicefarm:*delete*
                - directconnect:*delete*
                - discovery:*delete*
                - dlm:*delete*
                - dms:*delete*
                - ds:*delete*
                - dynamodb:*delete*
                - dynamodb:batchwriteitem
                - dynamodbstreams:*delete*
                - ec2-instance-connect:*delete*
                - ec2:*delete*
                - ec2messages:*delete*
                - ecr:*delete*
                - ecs:*delete*
                - efs:*delete*
                - eks:*delete*
                - elastic-inference:*delete*
                - elasticache:*delete*
                - elasticbeanstalk:*delete*
                - elasticfilesystem:*delete*
                - elasticloadbalancing:*delete*
                - elasticmapreduce:*delete*
                - elastictranscoder:*delete*
                - elb:*delete*
                - elbv2:*delete*
                - emr:*delete*
                - es:*delete*
                - events:*delete*
                - execute-api:*delete*
                - firehose:*delete*
                - fms:*delete*
                - freertos:*delete*
                - fsx:*delete*
                - gamelift:*delete*
                - glacier:*delete*
                - globalaccelerator:*delete*
                - glue:*delete*
                - greengrass:*delete*
                - groundstation:*delete*
                - groundtruthlabeling:*delete*
                - guardduty:*delete*
                - health:*delete*
                - iam:*delete*
                - importexport:*delete*
                - inspector:*delete*
                - iot:*delete*
                - iot1click:*delete*
                - iotanalytics:*delete*
                - iotdata:*delete*
                - iotevents:*delete*
                - iotsitewise:*delete*
                - iotthingsgraph:*delete*
                - kafka:*delete*
                - kinesis:*delete*
                - kinesisanalytics:*delete*
                - kinesisvideo:*delete*
                - kms:*delete*
                - kms:DisableKey
                - kms:ScheduleKeyDeletion
                - lambda:*delete*
                - lex:*delete*
                - license-manager:*delete*
                - lightsail:*delete*
                - logs:*delete*
                - machinelearning:*delete*
                - macie:*delete*
                - managedblockchain:*delete*
                - marketplacecommerceanalytics:*delete*
                - mechanicalturk:*delete*
                - mediaconnect:*delete*
                - mediaconvert:*delete*
                - medialive:*delete*
                - mediapackage:*delete*
                - mediastore:*delete*
                - mediatailor:*delete*
                - meteringmarketplace:*delete*
                - mgh:*delete*
                - mobileanalytics:*delete*
                - mobilehub:*delete*
                - mobiletargeting:*delete*
                - mq:*delete*
                - neptune-db:*delete*
                - opsworks-cm:*delete*
                - opsworks:*delete*
                - organizations:*delete*
                - personalize:*delete*
                - pi:*delete*
                - pinpoint:*delete*
                - polly:*delete*
                - pricing:*delete*
                - quicksight:*delete*
                - ram:*delete*
                - rds-data:*delete*
                - rds:*delete*
                - redshift:*delete*
                - rekognition:*delete*
                - resource-groups:*delete*
                - robomaker:*delete*
                - route53:*delete*
                - route53domains:*delete*
                - route53resolver:*delete*
                - s3:*delete*
                - s3api:*delete*
                - sagemaker:*delete*
                - sdb:*delete*
                - secretsmanager:*delete*
                - securityhub:*delete*
                - serverlessrepo:*delete*
                - servicecatalog:*delete*
                - servicediscovery:*delete*
                - servicequotas:*delete*
                - ses:*delete*
                - shield:*delete*
                - signer:*delete*
                - sms-voice:*delete*
                - sms:*delete*
                - snowball:*delete*
                - sns:*delete*
                - sqs:*delete*
                - ssm:*delete*
                - ssmmessages:*delete*
                - sso-directory:*delete*
                - sso:*delete*
                - states:*delete*
                - stepfunctions:*delete*
                - storagegateway:*delete*
                - sts:*delete*
                - sumerian:*delete*
                - support:*delete*
                - swf:*delete*
                - tag:*delete*
                - textract:*delete*
                - transcribe:*delete*
                - transfer:*delete*
                - translate:*delete*
                - trustedadvisor:*delete*
                - waf-regional:*delete*
                - waf:*delete*
                - wam:*delete*
                - wellarchitected:*delete*
                - workdocs:*delete*
                - worklink:*delete*
                - workmail:*delete*
                - workspaces:*delete*
                - xray:*delete*
          - Sid: terminateinstances
            Effect: Deny
            Action:
              - ec2:*terminate*
            Resource: "*"

Outputs:
  ReadOnlyRole:
    Description: The name of the ReadOnly IAM Role
    Condition: CreateReadOnlyRole
    Value: !Ref ReadOnlyRole
  ReadOnlyRoleArn:
    Description: The Amazon Resource Name (ARN) of the Audit IAM Role
    Condition: CreateReadOnlyRole
    Value: !GetAtt ReadOnlyRole.Arn
  ReadOnlyRoleLink:
    Description: AWS Console switch roles link for the Audit IAM Role
    Condition: CreateReadOnlyRole
    Value: !Sub https://signin.aws.amazon.com/switchrole?roleName=${ReadOnlyRole}&account=${AWS::AccountId}
  WorkingRole:
    Condition: CreateWorkingRole
    Description: The name of the Working IAM Role
    Value: !Ref WorkingRole
  WorkingRoleArn:
    Condition: CreateWorkingRole
    Description: The Amazon Resource Name (ARN) of the Working IAM Role
    Value: !GetAtt WorkingRole.Arn
  WorkingRoleLink:
    Condition: CreateWorkingRole
    Description: AWS Console switch roles link for the Working IAM Role
    Value: !Sub https://signin.aws.amazon.com/switchrole?roleName=${WorkingRole}&account=${AWS::AccountId}
  AdminRole:
    Condition: CreateAdminRole
    Description: The name of the Admin IAM Role
    Value: !Ref AdminRole
  AdminRoleArn:
    Condition: CreateAdminRole
    Description: The Amazon Resource Name (ARN) of the Admin IAM Role
    Value: !GetAtt AdminRole.Arn
  AdminRoleLink:
    Condition: CreateAdminRole
    Description: AWS Console switch roles link for the Admin IAM Role
    Value: !Sub https://signin.aws.amazon.com/switchrole?roleName=${AdminRole}&account=${AWS::AccountId}
  FullAccessRole:
    Condition: CreateFullAccessRole
    Description: The name of the FullAccess IAM Role
    Value: !Ref FullAccessRole
  FullAccessRoleArn:
    Condition: CreateFullAccessRole
    Description: The Amazon Resource Name (ARN) of the FullAccess IAM Role
    Value: !GetAtt FullAccessRole.Arn
  FullAccessRoleLink:
    Condition: CreateFullAccessRole
    Description: AWS Console switch roles link for the FullAccess IAM Role
    Value: !Sub https://signin.aws.amazon.com/switchrole?roleName=${FullAccessRole}&account=${AWS::AccountId}
